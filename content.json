{"posts":[{"title":"sshdの接続元を日本のIPに限定する","text":"fetus 国／地域別IPアドレス割り振り一覧 のIPリストを取得し、SSHの接続元を日本のIPに限定する 環境情報 OS Ubuntu Version 24.04.2 LTS hosts.allowとhosts.denyの設定 最終行は改行が必要（改行がないと正常に動作しない） /etc/hosts.allow 12sshd: /etc/jp.allow /etc/hosts.deny 12ALL : ALL スクリプト必要なライブラリの取得 1pip install requests jp_allow.py 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import requests# IPリストを取得するURLURL = &quot;https://ipv4.fetus.jp/jp.txt&quot;def convert_subnet(cidr_value): ''' サブネットを255.255.255.0形式に変換する関数 ''' subnet_map = { 8: &quot;255.0.0.0&quot;, 9: &quot;255.128.0.0&quot;, 10: &quot;255.192.0.0&quot;, 11: &quot;255.224.0.0&quot;, 12: &quot;255.240.0.0&quot;, 13: &quot;255.248.0.0&quot;, 14: &quot;255.252.0.0&quot;, 15: &quot;255.254.0.0&quot;, 16: &quot;255.255.0.0&quot;, 17: &quot;255.255.128.0&quot;, 18: &quot;255.255.192.0&quot;, 19: &quot;255.255.224.0&quot;, 20: &quot;255.255.240.0&quot;, 21: &quot;255.255.248.0&quot;, 22: &quot;255.255.252.0&quot;, 23: &quot;255.255.254.0&quot;, 24: &quot;255.255.255.0&quot;, 25: &quot;255.255.255.128&quot;, 26: &quot;255.255.255.192&quot;, 27: &quot;255.255.255.224&quot;, 28: &quot;255.255.255.240&quot;, 29: &quot;255.255.255.248&quot;, 30: &quot;255.255.255.252&quot;, 31: &quot;255.255.255.254&quot;, 32: &quot;255.255.255.255&quot; } return subnet_map.get(cidr_value)# URLからデータを取得response = requests.get(URL, timeout=5)ip_data = response.text.splitlines()# jp.allow形式に変換with open(&quot;/etc/jp.allow&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as file: output = [] for line in ip_data: if line and not line.startswith(&quot;#&quot;): # コメント行をスキップ ip, cidr = line.split('/') subnet = convert_subnet(int(cidr)) output.append(f&quot;{ip}/{subnet}&quot;) file.write(&quot; &quot;.join(output)) # スペースで区切って書き込みprint(&quot;IPリストがjp.allowファイルに変換されました。&quot;) 実行 /etc に書き込むため管理者権限が必要 1sudo python jp_allow.py 注意 hosts.allowとhosts.denyは接続の度に動的に読み込まれるので、別ターミナル等で試行してからセッションを切断すること","link":"/2025/06/23/jp_allow/"},{"title":"miseでのNodeバージョン管理","text":"mise の設定メモ 環境情報 OS macOS Version 15.5 BuildVersion 24F74 インストール12curl https://mise.run | shecho 'eval &quot;$(~/.local/bin/mise activate zsh)&quot;' &gt;&gt; ~/.zshrc インストール確認1mise doctor Node.jsの設定1234mise ls-remote nodemise use node@22.16.0# グローバルの場合mise use -g node@22.16.0 リポジトリ内でのバージョン指定.mise.toml 12[tools]node = &quot;22.16.0&quot; 1mise install","link":"/2025/06/22/mise/"},{"title":"SlackのIncoming Webhooksについて","text":"自分の知っていたSlackのIncoming-WebhookはLegacyなものとしてかなり前に非推奨になっていた話。 サポートに関する情報Discontinuing support for legacy custom bots and classic appsによれば 2024年6月: 新しいlegacy appsとclassic appsの作成をブロック開始 2025年3月31日: legacy custom botsのサポート終了 2026年5月25日: classic appsのサポート終了 公開されているスケジュールは上記のもので、Legacy Custom Integrationsにあたる、Legacy Incoming Webhookは明確に期日を決められているわけではなさそう。色々と仕様の変更については書かれているけど、基本的にはpayloadとして互換性もあるので、ひとまず移行してしまった方が無難という結論。 それぞれのの違いLegacy Incoming Webhook Incoming Webhookでアプリを検索すると表示される We do not recommend their use. という注意書きが上部にある 設定画面が１画面で完結し、非常にシンプルでわかりやすく設定できる Incoming Webhook Slack Appを作成し、Features &gt; Incoming Webhooks Activate Incoming Webhooks を On にする Add New Webhookで、URLをchannelごとに作成する それぞれの違い Legacy Incoming Webhook ペイロード内でusername、icon、channelを上書きできる URL知ってたらどのchannelでも書き込めるわけで、あんまりよくない仕様 特に 作成者が組織を離れるとWebhookが無効化される管理上の問題 が深刻 レイアウトはattachmentsで表現 Incoming Webhook レイアウトはBlock Kitを使用してより高度なメッセージ作成が可能 移行方法はMigrate your legacy message compositions to blocks ただし、attachmentsも非推奨だが使えるので互換性は担保されそう 特に色指定はattachmentsしか表現できず、メッセージの緊急度で色分けしたいケース（監視アラート等）では使うしかなさそう 前まで使えていたgood/warning/dangerは使えず、色コードでの指定が必須らしい（動作未確認）","link":"/2025/06/25/slack_webhooks/"},{"title":"uvでのpythonバージョン管理と仮想環境管理","text":"uv の設定メモ 環境情報 OS macOS Version 15.5 BuildVersion 24F74 インストール1brew install uv プロジェクト初回設定プロジェクトディレクトリで初期化1uv init pyproject.tomlが生成されるため、pythonバージョンを指定 pyproject.toml 1234567...[project]name = &quot;Project Name&quot;version = &quot;0.1.0&quot;description = &quot;Add your description here&quot;readme = &quot;README.md&quot;requires-python = &quot;&gt;=3.13&quot; requirements.txtの取り込み1uv add -r requirements.txt requirements.txtを取り込んだ後は削除してもOK pyproject.tomlをもとにパッケージをインストール1uv sync dependabot.github/dependabot.yml 123456version: 2updates: - package-ecosystem: &quot;uv&quot; # See documentation for possible values directory: &quot;/&quot; # Location of package manifests schedule: interval: &quot;weekly&quot; .gitignore.gitignore 12345...# uv package manager.uv/uv.lock.uvignore 作業開始時仮想環境を有効化1. .venv/bin/activate 作業終了時仮想環境を無効化1deactivate","link":"/2025/06/22/uv/"},{"title":"zed editorでのBedrock接続（Proxy経由）","text":"zed でAmazon Bedrock接続（Proxy経由）の設定メモ 環境情報 OS macOS Version 15.5 前提 AWS CLIがインストールされ、プロファイル設定が完了していること Bedrockのモデル有効化AWSマネジメントコンソールで利用したいRegionでBedrockの画面へアクセス“Bedrock configurations” &gt; “モデルアクセス” で有効化したいモデルをリクエスト Zed でのBedrockの設定 Authentication via Named Profile (Recommended) Network Proxy Setting.jsonを編集 1234567&quot;language_models&quot;: { &quot;bedrock&quot;: { &quot;authentication_method&quot;: &quot;named_profile&quot;, &quot;region&quot;: &quot;{your-aws-region}}&quot;, &quot;profile&quot;: &quot;{your-profile-name}&quot; },&quot;proxy&quot;: &quot;http://username:password@proxyserver:port&quot; 設定後、必ずZedの再起動が必要","link":"/2025/06/22/zed_bedrock/"},{"title":"zshとbashは違う","text":"jqを使った時に気づいた話 bashはデフォルトで.items[]をリテラルな文字列として扱う。 123# bashecho '{&quot;items&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]}' | jq -r .items[] | xargs echoa b c zshはデフォルトで、クォートされていない引数をグロブパターンとして扱おうとする。 123# zshecho '{&quot;items&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]}' | jq -r .items[] | xargs echozsh: no matches found: .items[] zshでこのコマンドを正しく動作させるには、.items[]をクォートで囲む必要がある。 12echo '{&quot;items&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]}' | jq -r '.items[]' | xargs echoa b c shellcheckを使うと安心Macのインストールは以下のコマンド 1brew install shellcheck","link":"/2024/09/07/zsh_bash/"}],"tags":[{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"sshd","slug":"sshd","link":"/tags/sshd/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":"mise","slug":"mise","link":"/tags/mise/"},{"name":"Slack","slug":"Slack","link":"/tags/Slack/"},{"name":"uv","slug":"uv","link":"/tags/uv/"},{"name":"Zed","slug":"Zed","link":"/tags/Zed/"},{"name":"Bedrock","slug":"Bedrock","link":"/tags/Bedrock/"},{"name":"zsh","slug":"zsh","link":"/tags/zsh/"},{"name":"bash","slug":"bash","link":"/tags/bash/"}],"categories":[{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Node.js","slug":"Node-js","link":"/categories/Node-js/"},{"name":"Slack","slug":"Slack","link":"/categories/Slack/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"Zed","slug":"Zed","link":"/categories/Zed/"},{"name":"Mac","slug":"Mac","link":"/categories/Mac/"}],"pages":[]}